/*!
 * jquery.animatebar.js 1.1
 *
 * Copyright 2018, 5Studios.net https://www.5studios.net
 * Released under the GPL v2 License
 *
 * Date: Sep 13, 2018
 */
(function($) {
  "use strict";

  var defaults = {
    delay: 100,
    step: 0,
    duration: 3000,
    orientation: "horizontal"
  };

  function AnimateBar(element, options) {
    this.config = options;
    this.element = element; //DOM element
    this.isHorizontal = this.config.orientation === "horizontal";

    this.init();
  }

  AnimateBar.prototype.init = function() {
    var t = this;

    new Waypoint({
      element: t.element,
      handler: function() {
        AnimateBar.prototype.animate.apply(t, null);
        this.destroy();
      },
      offset: "100%"
    });
  };

  AnimateBar.prototype.animate = function() {
    var $element = $(this.element);
    var percent = $element.data("percent");
    var config = this.config;
    var isHorizontal = this.isHorizontal;

    setTimeout(function() {
      if (isHorizontal) {
        $(".progress-bar", $element).animate(
          {
            width: percent + "%"
          },
          config.duration
        );
      } else {
        $(".progress-bar", $element).animate(
          {
            height: percent + "%"
          },
          config.duration
        );
      }
    }, config.delay + config.step);
  };

  function BarChart(element, options) {
    this.config = $.extend({}, defaults, options);
    this.tag = element; //DOM element
    this.elements = options.elements; // Bars to generate

    this.renderBars();
    this.createAnimation();
  }

  BarChart.prototype.renderBars = function() {
    var options = this.config;
    var orientation = options.orientation;

    var bars = [];

    this.elements.forEach(function(element) {
      var barSize = 100;
      var percent = element.value;
      var style = element.style || {};

      var $progressBar = $("<div/>", {
        class: "progress-bar"
      });
      var $bar = $("<div/>", {
        class: "progress " + (style.progress || "progress-default"),
        html: $progressBar
      }).data("percent", percent);

      if (orientation === "horizontal") {
        $bar.css({ width: barSize + "%" });
        $progressBar.css({ width: 0 });
      } else {
        $bar.css({ height: barSize + "%" });
        $progressBar.css({ height: 0 });
      }

      var $legend = $("<p>", {
        html: [element.label, $("<span>", { html: percent + "%" })]
      });

      var $li = $("<li/>", { html: [$legend, $bar] });

      //$bar.data("animation", new AnimateBar($bar[0], $.extend({}, options, { step: (1 + index) * options.step })));

      bars.push($li);
    });

    $(this.tag)
      .append(bars)
      .addClass("progress-" + orientation);
  };

  BarChart.prototype.createAnimation = function() {
    var options = this.config;

    $("li .progress", this.tag).each(function(index) {
      $(this).data(
        "animation",
        new AnimateBar(this, {
          delay: options.delay,
          step: (1 + index) * options.step,
          duration: options.duration,
          orientation: options.orientation
        })
      );
    });
  };

  $.fn.animateBar = function(options) {
    return this.each(function() {
      new BarChart(this, options);
    });
  };
})(jQuery);

"use strict";

(function($) {
  $(function() {
    /**
     * Swiper Initialization
     **/
    $(".swiper-container").each(function() {
      var $this = $(this);
      var boolData = {
        breakpoints: $this.data("sw-breakpoints"),
        active_selector: $this.data("sw-active-selector"),
        cover_flow: $this.data("sw-coverflow"),
        auto_play: $this.data("sw-autoplay"),
        loop: $this.data("sw-loop"),
        centered: $this.data("sw-centered-slides"),
        pagination: $this.data("sw-pagination"),
        nav_arrows: $this.data("sw-nav-arrows"),
        dynamicBullets: $this.data("sw-dynamic-bullets")
      };

      var breakPoints = boolData.breakpoints || false;
      var auto_play =
        boolData.auto_play !== undefined ? boolData.auto_play : false;
      var speed = $this.data("sw-speed") || 1100;
      var effect = $this.data("sw-effect") || "slide";
      var showItems = $this.data("sw-show-items") || 1;
      var loop = boolData.loop !== undefined ? boolData.loop : true;
      var centered = boolData.centered !== undefined ? boolData.centered : true;
      var dynamicBullets =
        boolData.dynamicBullets !== undefined ? boolData.dynamicBullets : true;
      var spaceBetween =
        $this.data("sw-space-between") || (showItems > 1 ? 20 : 0);
      var scrollItems = $this.data("sw-scroll-items") || 1;
      var navigationElement = $this.data("sw-navigation");
      var navigationActiveClass =
        $this.data("sw-navigation-active") || "active";
      var navigationActiveSelector =
        boolData.active_selector !== undefined
          ? boolData.active_selector
          : false;
      var paginationCss =
        boolData.pagination !== undefined
          ? boolData.pagination
          : ".swiper-pagination";
      var navigationCss =
        boolData.nav_arrows !== undefined
          ? boolData.nav_arrows
          : ".swiper-button";

      var coverflow = boolData.cover_flow
        ? {
            coverflowEffect: $.extend(
              {
                stretch: 0,
                depth: 0,
                modifier: 1,
                rotate: 0,
                slideShadows: false
              },
              boolData.cover_flow
            )
          }
        : {};

      var autoplay = auto_play
        ? {
            autoplay: {
              delay: auto_play,
              disableOnIteration: false
            },
            speed: speed
          }
        : {};

      var pagination = {};

      if (paginationCss) {
        pagination.pagination = {
          el: paginationCss,
          clickable: true
        };

        /* if (dynamicBullets) {
                    pagination.pagination.dynamicBullets = dynamicBullets;
                } */
      }

      if (navigationCss) {
        pagination.navigation = {
          nextEl: navigationCss + "-next",
          prevEl: navigationCss + "-prev"
        };
      }

      var events = {};

      /**/ if (navigationElement) {
        //console.log("navigationElement swiper", navigationElement);
        events = {
          transitionEnd: function() {
            if (!navigationElement) return;

            var $navigationElement = $(navigationElement);

            if (navigationActiveSelector) {
              $(
                navigationActiveSelector + "." + navigationActiveClass,
                $navigationElement
              ).removeClass(navigationActiveClass);
              $(
                ".nav-item:eq(" +
                  swiper.realIndex +
                  ") " +
                  navigationActiveSelector,
                $navigationElement
              ).addClass(navigationActiveClass);
            } else {
              $("." + navigationActiveClass, $navigationElement).removeClass(
                navigationActiveClass
              );
              $(
                ".nav-item:eq(" + swiper.realIndex + ")",
                $navigationElement
              ).addClass(navigationActiveClass);
            }
          }
        };
      } /**/

      var options = $.extend(
        {
          loop: loop,
          slidesPerGroup: scrollItems,
          spaceBetween: spaceBetween,
          centeredSlides: centered,
          breakpoints: breakPoints,
          slidesPerView: showItems,
          parallax: true,
          effect: effect
        },
        pagination,
        autoplay,
        coverflow
      );

      console.log("swiper options", options);
      var swiper = new Swiper(this, options);

      for (var e in events) {
        swiper.on(e, events[e]);
      }

      if (navigationElement) {
        $(navigationElement).on("click", ".nav-item", function(evt) {
          evt.preventDefault();

          var $item = $(this);
          var $activeItem = $item;

          if (navigationActiveSelector) {
            $activeItem = $(navigationActiveSelector, $item);
          }

          if ($activeItem.hasClass(navigationActiveClass)) {
            return false;
          }

          var index = $item.data("step") || $item.index() + 1;
          swiper.slideTo(index);

          if (navigationActiveSelector) {
            $item.siblings().each(function() {
              $(navigationActiveSelector, this).removeClass(
                navigationActiveClass
              );
            });

            $activeItem.addClass(navigationActiveClass);
          } else {
            $item
              .siblings("." + navigationActiveClass)
              .removeClass(navigationActiveClass);
            $item.addClass(navigationActiveClass);
          }

          return false;
        });
      }
    });

    $(".scroll-bar").each(function(i, e) {
      var bar = new SimpleBar(e);
    });
  });
})(jQuery);

/*!
 Dashcore - HTML Startup Template, v1.0
 Forms JS file
 Copyright Â© 2018 5Studios.net
 http://5studios.net
 */

"use strict";
$(function($) {
  $("form").each(function() {
    var $form = $(this);
    var states = !!$form.data("states") || false;

    var options = {
      // ignore: [], // uncomment this in case you need to validate :hidden inputs ([type=hidden], display:none are considered :hidden)
      errorPlacement: function(error, element) {
        var $parent = element.parent();

        if ($parent.hasClass("input-group")) {
          error.insertAfter($parent);
        } else if ($parent.hasClass("has-icon")) {
          error.insertBefore($parent);
        } else if ($parent.hasClass("control")) {
          error.insertAfter(element.next(".control-label"));
        } else {
          error.insertAfter(element);
        }

        error.addClass("error");
      },
      errorClass: "is-invalid"
    };

    // Check if the <form /> tag has data-states="true" attribute, if true append the 'is-valid' class to the input element
    if (states) options["validClass"] = "is-valid";

    if ($form.data("validate-on") == "submit") {
      $.extend(options, {
        onfocusout: false,
        onkeyup: false
      });
    }

    // call to validate plugin
    $form.validate(options);
  });

  $("form").submit(function(evt) {
    evt.preventDefault();
    var $form = $(this);

    if (!$form.valid()) {
      return false;
    }

    var $submit = $("button[type=submit]", this);
    $submit.addClass("loading");

    var $ajaxButton = $submit.parent(".ajax-button");
    var hasAjaxButton = $ajaxButton.length;
    var $message = $form.next(".response-message");

    function doAjax(url, data, config) {
      var settings = $.extend(true, {}, config, {
        url: url,
        type: "POST",
        data: data,
        dataType: "json"
      });

      $.ajax(settings)
        .done(function(data) {
          if (data.result) {
            //setTimeout(function() {
            $form.trigger("form.submitted", [data]);
            //}, 1000);

            $("input, textarea", $form).removeClass("error");
            $(".response", $message).html(data.message);

            // restore button defaults
            if (hasAjaxButton) {
              $(".success", $ajaxButton).addClass("done");
            }

            $form.addClass("submitted");
            $form[0].reset();
          } else {
            if (hasAjaxButton) {
              $(".failed", $ajaxButton).addClass("done");
            }

            if (data.errors) {
              $.each(data.errors, function(i, v) {
                var $input = $("[name$='[" + i + "]']", $form).addClass(
                  "error"
                );
                $input
                  .tooltip({ title: v, placement: "bottom", trigger: "manual" })
                  .tooltip("show")
                  .on("focus", function() {
                    $(this).tooltip("dispose");
                  });
              });
            }
          }
        })
        .fail(function() {
          $(".response", $message).html(
            $("<span class='block'>Something went wrong.</span>")
          );
          if (hasAjaxButton) {
            $(".failed", $ajaxButton).addClass("done");
          }
        })
        .always(function() {
          $submit.addClass("loading-end");

          if (hasAjaxButton) {
            setTimeout(function() {
              console.log("clearing status");
              $submit.removeClass("loading").removeClass("loading-end");
              $(".success,.failed", $ajaxButton).removeClass("done");
            }, 500);
          }
          //some other stuffs
        });
    }

    function submitAjax($form) {
      doAjax($form.attr("action"), $form.serializeArray());
    }

    submitAjax($form);

    return false;
  });
});

/*!
 * Dashcore - HTML Startup Template, v3.0.0
 * Horizontal random bubbles variations.
 * Copyright Â© 2021 5Studios.net
 * https://5studios.net
 * Credits to: https://codepen.io/lokesh
 */

"use strict";

(function($, global, $scope) {
  $scope.SCROLL_SPEED = 0.3;
  $scope.NOISE_SPEED = 0.004;
  $scope.NOISE_AMOUNT = 5;
  $scope.CANVAS_WIDTH = 2800;

  $scope.bubbles = [
    { s: 0.6, x: 1134, y: 45 },
    { s: 0.6, x: 1620, y: 271 },
    { s: 0.6, x: 1761, y: 372 },
    { s: 0.6, x: 2499, y: 79 },
    { s: 0.6, x: 2704, y: 334 },
    { s: 0.6, x: 2271, y: 356 },
    { s: 0.6, x: 795, y: 226 },
    { s: 0.6, x: 276, y: 256 },
    { s: 0.6, x: 1210, y: 365 },
    { s: 0.6, x: 444, y: 193 },
    { s: 0.6, x: 2545, y: 387 },
    { s: 0.8, x: 1303, y: 193 },
    { s: 0.8, x: 907, y: 88 },
    { s: 0.8, x: 633, y: 320 },
    { s: 0.8, x: 323, y: 60 },
    { s: 0.8, x: 129, y: 357 },
    { s: 0.8, x: 1440, y: 342 },
    { s: 0.8, x: 1929, y: 293 },
    { s: 0.8, x: 2135, y: 198 },
    { s: 0.8, x: 2276, y: 82 },
    { s: 0.8, x: 2654, y: 182 },
    { s: 0.8, x: 2783, y: 60 },
    { x: 1519, y: 118 },
    { x: 1071, y: 233 },
    { x: 1773, y: 148 },
    { x: 2098, y: 385 },
    { x: 2423, y: 244 },
    { x: 901, y: 385 },
    { x: 624, y: 111 },
    { x: 75, y: 103 },
    { x: 413, y: 367 },
    { x: 2895, y: 271 },
    { x: 1990, y: 75 }
  ];

  $scope.bubblesEl = document.querySelector(".bubbles-container");

  // For perlin noise
  $scope.noise = new Noise(Math.floor(Math.random() * 64000));

  function Bubbles(specs) {
    var instance = this;
    instance.bubbles = [];

    specs.forEach(function(spec, index) {
      instance.bubbles.push(new Bubble(index, spec.x, spec.y, spec.s));
    });

    requestAnimationFrame(instance.update.bind(instance));
  }

  function Bubble(index, x, y, s) {
    if (s === undefined) {
      s = 1;
    }

    this.index = index;
    this.x = x;
    this.y = y;
    this.scale = s;

    this.noiseSeedX = Math.floor(Math.random() * 64000);
    this.noiseSeedY = Math.floor(Math.random() * 64000);

    this.el = document.createElement("div");
    this.el.className = "bubble bubble-" + (this.index + 1);
    $scope.bubblesEl.appendChild(this.el);
  }

  Bubbles.prototype.update = function() {
    this.bubbles.forEach(function(bubble) {
      bubble.update();
    });
    this.raf = requestAnimationFrame(this.update.bind(this));
  };

  Bubble.prototype.update = function() {
    this.noiseSeedX += $scope.NOISE_SPEED;
    this.noiseSeedY += $scope.NOISE_SPEED;
    var randomX = $scope.noise.simplex2(this.noiseSeedX, 0);
    var randomY = $scope.noise.simplex2(this.noiseSeedY, 0);

    this.x -= $scope.SCROLL_SPEED;
    this.xWithNoise = -this.x + randomX * $scope.NOISE_AMOUNT;
    this.yWithNoise = this.y + randomY * $scope.NOISE_AMOUNT;

    if (this.x < -200) {
      this.x = $scope.CANVAS_WIDTH;
    }

    this.el.style.transform =
      "translate(" +
      this.xWithNoise +
      "px, " +
      this.yWithNoise +
      "px) scale(" +
      this.scale +
      ")";
  };

  $(function() {
    if ($scope.bubblesEl) {
      new Bubbles($scope.bubbles);
    }
  });
})(jQuery, this, {});

/*!
 * Dashcore - HTML Startup Template, v1.1.8
 * Stripe menu.
 * Copyright Â© 2019 5Studios.net
 * https://5studios.net
 */

"use strict";

(function($, global, $scope) {
  $scope.Util = {
    queryArray: function(e, p) {
      p || (p = document.body);

      return Array.prototype.slice.call(p.querySelectorAll(e));
    },
    touch: {
      isSupported: "ontouchstart" in global || navigator.maxTouchPoints,
      isDragging: false
    }
  };

  $scope.menu = document.querySelector(".st-nav");

  function StripeMenu(menuElement) {
    var menu = this;

    /**
     * Main events used to enable interaction with menu
     **/
    var events = global.PointerEvent
      ? {
          end: "pointerup",
          enter: "pointerenter",
          leave: "pointerleave"
        }
      : {
          end: "touchend",
          enter: "mouseenter",
          leave: "mouseleave"
        };

    /**
     * The main navigation element.
     **/
    this.container = menuElement; // document.querySelector(menuElement);
    this.container.classList.add("no-dropdown-transition");

    /**
     * Element holding the menu options, not the dropdown
     **/
    this.root = this.container.querySelector(".st-nav-menu");

    /**
     * Those elements used to show the dropdown animation and transitioning
     **/
    this.dropdownBackground = this.container.querySelector(".st-dropdown-bg");
    this.dropdownBackgroundAlt = this.container.querySelector(".st-alt-bg");
    this.dropdownContainer = this.container.querySelector(
      ".st-dropdown-container"
    );
    this.dropdownArrow = this.container.querySelector(".st-dropdown-arrow");

    /**
     * Elements which will have the dropdown content to be shown
     **/
    this.hasDropdownLinks = $scope.Util.queryArray(
      ".st-has-dropdown",
      this.root
    );

    /**
     * Each dropdown section to be displayed on mouse interactions
     **/
    this.dropdownSections = $scope.Util.queryArray(
      ".st-dropdown-section",
      this.container
    ).map(function(el) {
      return {
        el: el,
        name: el.getAttribute("data-dropdown"),
        content: el.querySelector(".st-dropdown-content"),
        width: el.querySelector(".st-dropdown-content").offsetWidth
      };
    });

    /**
     * Menu link interaction
     **/
    this.hasDropdownLinks.forEach(function(el) {
      el.addEventListener(events.enter, function(evt) {
        if (evt.pointerType === "touch") return;
        menu.stopCloseTimeout();
        menu.openDropdown(el);
      });

      el.addEventListener(events.leave, function(evt) {
        if (evt.pointerType === "touch") return;
        menu.startCloseTimeout();
      });

      el.addEventListener(events.end, function(evt) {
        evt.preventDefault();
        evt.stopPropagation();
        menu.toggleDropdown(el);
      });
    });

    /**
     * Menu container interaction with content
     **/
    this.dropdownContainer.addEventListener(events.enter, function(evt) {
      if (evt.pointerType === "touch") return;
      menu.stopCloseTimeout();
    });

    this.dropdownContainer.addEventListener(events.leave, function(evt) {
      if (evt.pointerType === "touch") return;
      menu.startCloseTimeout();
    });

    this.dropdownContainer.addEventListener(events.end, function(evt) {
      evt.stopPropagation();
    });

    document.body.addEventListener(events.end, function(e) {
      $scope.Util.touch.isDragging || menu.closeDropdown();
    });
  }

  function StripeMenuPopup(element) {
    var popupMenu = this;
    var eventTrigger = $scope.Util.touch.isSupported ? "touchend" : "click";

    this.root = document.querySelector(element);
    this.activeClass = "st-popup-active";
    this.link = this.root.querySelector(".st-root-link");
    this.popup = this.root.querySelector(".st-popup");
    this.closeButton = this.root.querySelector(".st-popup-close-button");

    this.link.addEventListener(eventTrigger, function(evt) {
      evt.stopPropagation();
      popupMenu.togglePopup();
    });

    this.popup.addEventListener(eventTrigger, function(evt) {
      evt.stopPropagation();
    });

    this.closeButton &&
      this.closeButton.addEventListener(eventTrigger, function(evt) {
        popupMenu.closeAllPopups();
      });

    document.body.addEventListener(
      eventTrigger,
      function(evt) {
        $scope.Util.touch.isDragging || popupMenu.closeAllPopups();
      },
      false
    );
  }

  StripeMenu.prototype.openDropdown = function(hasDropDownLink) {
    var stripeMenu = this;
    if (this.activeDropdown === hasDropDownLink) return;

    this.activeDropdown = hasDropDownLink;

    this.container.classList.add("overlay-active");
    this.container.classList.add("dropdown-active");

    /**
     * Setting the default menu active equals to this link
     **/
    this.hasDropdownLinks.forEach(function(link) {
      link.classList.remove("active");
    });
    hasDropDownLink.classList.add("active");

    /**
     * Next section to show
     **/
    var nextSection = hasDropDownLink.getAttribute("data-dropdown"),
      position = "left";

    var dropdown = {
      width: 0,
      height: 0,
      content: null
    };

    this.dropdownSections.forEach(function(dropDownSection) {
      dropDownSection.el.classList.remove("active");
      dropDownSection.el.classList.remove("left");
      dropDownSection.el.classList.remove("right");

      if (dropDownSection.name === nextSection) {
        dropDownSection.el.classList.add("active");
        position = "right";

        dropdown = {
          width: dropDownSection.content.offsetWidth,
          height: dropDownSection.content.offsetHeight,
          content: dropDownSection.content
        };
      } else {
        dropDownSection.el.classList.add(position);
      }
    });

    var u = 520,
      a = 400,
      scaleX = dropdown.width / u,
      scaleY = dropdown.height / a,
      ddCr = hasDropDownLink.getBoundingClientRect(),
      translateX = ddCr.left + ddCr.width / 2 - dropdown.width / 2;

    translateX = Math.round(Math.max(translateX, 10));

    clearTimeout(this.disableTransitionTimeout);
    this.enableTransitionTimeout = setTimeout(function() {
      stripeMenu.container.classList.remove("no-dropdown-transition");
    }, 50);

    this.dropdownBackground.style.transform =
      "translateX(" +
      translateX +
      "px) scaleX(" +
      scaleX +
      ") scaleY(" +
      scaleY +
      ")";
    this.dropdownContainer.style.transform = "translateX(" + translateX + "px)";

    this.dropdownContainer.style.width = dropdown.width + "px";
    this.dropdownContainer.style.height = dropdown.height + "px";

    var arrowPosX = Math.round(ddCr.left + ddCr.width / 2);
    this.dropdownArrow.style.transform =
      "translateX(" + arrowPosX + "px) rotate(45deg)";

    var d = dropdown.content.children[0].offsetHeight / scaleY;
    this.dropdownBackgroundAlt.style.transform = "translateY(" + d + "px)";
  };

  StripeMenu.prototype.closeDropdown = function() {
    var stripeMenu = this;
    if (!this.activeDropdown) return;

    this.hasDropdownLinks.forEach(function(link, t) {
      link.classList.remove("active");
    });

    clearTimeout(this.enableTransitionTimeout);

    this.disableTransitionTimeout = setTimeout(function() {
      stripeMenu.container.classList.add("no-dropdown-transition");
    }, 50);

    this.container.classList.remove("overlay-active");
    this.container.classList.remove("dropdown-active");
    this.activeDropdown = undefined;
  };

  StripeMenu.prototype.toggleDropdown = function(e) {
    this.activeDropdown === e ? this.closeDropdown() : this.openDropdown(e);
  };

  StripeMenu.prototype.startCloseTimeout = function() {
    var e = this;
    e.closeDropdownTimeout = setTimeout(function() {
      e.closeDropdown();
    }, 50);
  };

  StripeMenu.prototype.stopCloseTimeout = function() {
    var e = this;
    clearTimeout(e.closeDropdownTimeout);
  };

  StripeMenuPopup.prototype.togglePopup = function() {
    var isActive = this.root.classList.contains(this.activeClass);

    this.closeAllPopups(true);
    isActive || this.root.classList.add(this.activeClass);
  };

  StripeMenuPopup.prototype.closeAllPopups = function(e) {
    var activeLinks = document.getElementsByClassName(this.activeClass);

    for (var i = 0; i < activeLinks.length; i++)
      activeLinks[i].classList.remove(this.activeClass);
  };

  $(function() {
    if ($scope.menu) {
      new StripeMenu($scope.menu);
      new StripeMenuPopup(".st-nav .st-nav-section.st-nav-mobile");
    }
  });
})(jQuery, window, {});

/**
 * Title:   Dashcore - HTML App Landing Page - Credit Card Form file
 * Author:  http://themeforest.net/user/5studiosnet
 *
 * This snippet uses the card package, please refer to its docs in order to customize it
 * https://www.npmjs.com/package/card
 **/

"use strict";

$(function() {
  var paymentForm = document.querySelector(".checkout-cc-payment-form");

  if (paymentForm) {
    var card = new Card({
      form: paymentForm,
      container: ".card-wrapper",
      masks: {
        cardNumber: "â¢" // optional - mask card number
      }
    });
  }
});

"use strict";

/**
 * PRICING TABLES
 **/

(function($, $scope) {
  $scope.$pricingTable = $(".pricing-table table");

  $scope.gridFloatBreakpointMax = 768 - 1;

  $scope.basis = $('input[name="pricing-basis"]').val();

  // Needs a way to calculate prices, it will require additional logic and work
  $scope.calculatePrice = function() {
    return {};
  };

  $scope.resizeWindow = function(e) {
    if (e.innerWidth <= $scope.gridFloatBreakpointMax) {
      $("> .expand-mobile .visible-cell", $scope.$pricingTable).attr(
        "colspan",
        2
      );
    } else {
      $("> .expand-mobile .visible-cell", $scope.$pricingTable).removeAttr(
        "colspan"
      );
    }
  };

  $scope.moveToPricingTab = function(tab) {
    var hid = "ph-" + tab;

    //$("thead th.visible-cell", $pricingTable).removeClass("visible-cell").removeAttr("colspan");
    $(".expand-mobile .visible-cell", $scope.$pricingTable)
      .removeClass("visible-cell")
      .removeAttr("colspan");
    $("thead th#" + hid, $scope.$pricingTable)
      .addClass("visible-cell")
      .attr("colspan", 2);
    $(".expand-mobile td[headers*=" + hid + "]", $scope.$pricingTable).attr(
      "colspan",
      2
    );

    $("td[headers].visible-cell", $scope.$pricingTable).removeClass(
      "visible-cell"
    );
    $("td[headers*=" + hid + "]", $scope.$pricingTable).addClass(
      "visible-cell"
    );
  };

  $(function() {
    $(".pricing-table-tabs").on(
      "change",
      'input[name="pricing-plan"]',
      function() {
        $scope.moveToPricingTab(this.value);
      }
    );

    $(".pricing-table-basis").on(
      "change",
      'input[name="pricing-basis"]',
      function() {
        $scope.basis = this.value;
        $scope.$pricingTable
          .removeClass("yearly-display monthly-display")
          .addClass($scope.basis + "-display");

        $(".odometer").each(function() {
          this.innerHTML = $(this).data($scope.basis);
        });
      }
    );

    $(".pricing-details").on("change", '[data-bs-toggle="price"]', function() {
      var $element = $(this);
      var currentValue = $element.val();

      var price = $scope.calculatePrice(currentValue);

      // Calculating the prices will require additional effort,
      // As a demo matter just toggle between monthly and yearly values
      $scope.basis = $scope.basis === "yearly" ? "monthly" : "yearly";

      $(".odometer").each(function() {
        this.innerHTML = $(this).data($scope.basis);
      });
    });

    // Windows resize
    $(window).resize(function() {
      $scope.resizeWindow(this);
    });

    $scope.resizeWindow(window);
  });
})(jQuery, {});

/**
 * Title:   Dashcore - HTML App Landing Page - Main Javascript file
 * Author:  http://themeforest.net/user/5studiosnet
 **/

(function() {
  "use strict";

  $('[data-bs-toggle="tooltip"]').tooltip();
});

/*
 * Replace all SVG images with inline SVG
 */
$(function() {
  $("img.inline-it").each(function() {
    var $img = jQuery(this);
    var imgID = $img.attr("id");
    var imgClass = $img.attr("class");
    var imgURL = $img.attr("src");

    jQuery.get(
      imgURL,
      function(data) {
        // Get the SVG tag, ignore the rest
        var $svg = jQuery(data).find("svg");

        // Add replaced image's ID to the new SVG
        if (typeof imgID !== "undefined") {
          $svg = $svg.attr("id", imgID);
        }

        // Add replaced image's classes to the new SVG
        if (typeof imgClass !== "undefined") {
          $svg = $svg.attr("class", imgClass + " inlined-svg");
        }

        // Remove any invalid XML tags as per http://validator.w3.org
        $svg = $svg.removeAttr("xmlns:a");

        // Replace image with new SVG
        $img.replaceWith($svg);
      },
      "xml"
    );
  });
});

/**
 * Title:   Dashcore - HTML App Landing Page - Main Javascript file
 * Author:  http://themeforest.net/user/5studiosnet
 **/

(function() {
  "use strict";

  // Avoid `console` errors in browsers that lack a console.
  var method;
  var noop = function() {};
  var methods = [
    "assert",
    "clear",
    "count",
    "debug",
    "dir",
    "dirxml",
    "error",
    "exception",
    "group",
    "groupCollapsed",
    "groupEnd",
    "info",
    "log",
    "markTimeline",
    "profile",
    "profileEnd",
    "table",
    "time",
    "timeEnd",
    "timeline",
    "timelineEnd",
    "timeStamp",
    "trace",
    "warn"
  ];
  var length = methods.length;
  var console = (window.console = window.console || {});

  while (length--) {
    method = methods[length];

    // Only stub undefined methods.
    if (!console[method]) {
      console[method] = noop;
    }
  }
})();

// Place any code in here.
$(function() {
  "use strict";

  /** navbar reference **/
  var $navbar = $(".main-nav"),
    stickyPoint = 90;

  /** Perspective mockups reference **/
  var $perspectiveMockups = $(".perspective-mockups");

  // This element is used as reference for relocation of the mockups on mobile devices.
  // If you remove it please be sure you add another reference element preferably within the same section and/or position the button was.
  // You can change the selector (".learn-more") to one that uniquely identifies the reference element.
  var $topReference = $(".learn-more", ".lightweight-template");

  var setMockupsTop = function() {
    // check if the perspective mockups elements are on the page, if you're not going to use them, you can remove all its references
    if (!$perspectiveMockups.length) return;

    if ($(window).outerWidth() < 768) {
      $perspectiveMockups.css({ top: $topReference.offset().top + "px" });
      return;
    }

    $perspectiveMockups.removeAttr("style");
  };

  var navbarSticky = function() {
    if ($(window).scrollTop() >= stickyPoint) {
      $navbar.addClass("navbar-sticky");
    } else {
      $navbar.removeClass("navbar-sticky");
    }
  };

  /**
   * STICKY MENU
   **/
  $(window).on("scroll", navbarSticky);

  navbarSticky();

  /**
   * SCROLLING NAVIGATION
   * Enable smooth transition animation when scrolling
   **/
  $("a.scrollto").on("click", function(event) {
    event.preventDefault();

    var scrollAnimationTime = 300;
    var target = this.hash;

    $("html, body")
      .stop()
      .animate(
        {
          scrollTop: $(target).offset().top - 45
        },
        scrollAnimationTime,
        "easeInOutExpo",
        function() {
          window.location.hash = target;
        }
      );
  });

  /**
   *  NAVBAR SIDE COLLAPSIBLE - On Mobiles
   **/
  $(".navbar-toggler", $navbar).on("click", function() {
    if (!$navbar.is(".st-nav")) $navbar.toggleClass("navbar-expanded");
  });

  /**
   * Blog interaction with buttons: favorite and bookmark
   **/
  $(".card-blog").on(
    {
      click: function(e) {
        e.preventDefault();

        var $el = $(this)
          .removeClass("far")
          .addClass("fas");
        if ($el.hasClass("favorite")) {
          $el.addClass("text-danger");
        } else {
          $el.addClass("text-warning");
        }
      },
      mouseenter: function() {
        $(this).addClass("fas");
      },
      mouseleave: function() {
        $(this).removeClass("fas");
      }
    },
    "i.far"
  );

  /**
   * Position the perspective mockups at the end of the first content section on mobile
   **/
  $perspectiveMockups.removeClass("hidden-preload");
  $(window).on("resize", setMockupsTop);

  setMockupsTop();

  /** PLUGINS INITIALIZATION */
  /* Bellow this, you can remove the plugins you're not going to use.
   * If you do so, remember to remove the script reference within the HTML.
   **/

  /**
   * Handle the login form, once the server has sent a successful response
   **/
  $(".login-form form").on("form.submitted", function(evt, data) {
    window.location.replace("admin/");
  });

  /**
   * Prettyprint
   **/
  window.prettyPrint && prettyPrint();

  /**
   * AOS
   * Cool scrolling animations
   **/
  AOS.init({
    offset: 100,
    duration: 1500,
    disable: "mobile"
  });

  /**
   * typed.js
   **/
  if ($(".typed").length) {
    $(".typed").each(function(i, el) {
      var strings = $(el).data("strings");

      var typed = new Typed(".typed", {
        strings: strings,
        typeSpeed: 150,
        backDelay: 500,
        backSpeed: 50,
        loop: true
      });
    });
  }

  /**
   * COUNTERS
   **/
  if ($(".counter").length) {
    $(".counter").each(function(i, el) {
      new Waypoint({
        element: el,
        handler: function() {
          counterUp.default(el);
          this.destroy();
        },
        offset: "bottom-in-view"
      });
    });
  }

  /**
   * POPUPS
   **/
  (function() {
    $(".modal-popup").each(function() {
      var $element = $(this);

      // Some default to apply for all instances of Modal
      var defaults = {
        removalDelay: 500,
        preloader: false,
        midClick: true,
        callbacks: {
          beforeOpen: function() {
            this.st.mainClass = this.st.el.attr("data-effect");
          }
        }
      };

      // Defaults to use for specific types
      var typeDefaults = {
        image: {
          closeOnContentClick: true
        },
        gallery: {
          delegate: "a",
          // when gallery is used change the type to 'image'
          type: "image",
          tLoading: "Loading image #%curr%...",
          mainClass: "mfp-with-zoom mfp-img-mobile",
          gallery: {
            enabled: true,
            navigateByImgClick: true,
            preload: [0, 1] // Will preload 0 - before current, and 1 after the current image
          },
          image: {
            tError: '<a href="%url%">The image #%curr%</a> could not be loaded.'
          }
        }
      };

      // Load configuration values from data attributes
      var type = $element.data("type") || "inline";
      var zoomSpeed = $element.data("zoom") || false;
      var focus = $element.data("focus") || false;

      var attributes = {};

      if (zoomSpeed) {
        attributes.zoom = {
          enabled: true,
          duration: zoomSpeed
        };
      }

      if (focus) {
        attributes.focus = focus;
      }

      // According to the type, get the JSON configuration for each
      $.each(["image", "gallery"], function() {
        var attr = $element.data(this) || false;

        if (attr) {
          typeDefaults[type][this] = attr;
        }

        // remove the values from the markup
        $element.removeAttr("data-" + this);
      });

      var options = $.extend(
        {},
        defaults,
        {
          type: type
        },
        typeDefaults[type],
        attributes
      );

      $element.magnificPopup(options);
    });

    $(document).on("click", ".modal-popup-dismiss", function(e) {
      e.preventDefault();
      $.magnificPopup.close();
    });
  })();

  /**
   * ANIMATION BAR
   **/
  (function() {
    $(".whyus-progress-bars").animateBar({
      orientation: "horizontal",
      step: 100,
      duration: 1000,
      elements: [
        {
          label: "Implementation",
          value: 73,
          style: { progress: "progress-xs" }
        }, // style: { progress: "progress-4" }
        { label: "Design", value: 91, style: { progress: "progress-xs" } },
        { label: "Beauty", value: 97, style: { progress: "progress-xs" } },
        { label: "Branding", value: 61, style: { progress: "progress-xs" } },
        {
          label: "Responsiveness",
          value: 100,
          style: { progress: "progress-xs" }
        }
      ]
    });
  })();

  /**
   * Feather Icons
   **/
  feather.replace();

  /**
   * Prismjs
   **/

  /**
   * PRICING TABLES
   **/
  $(".pricing-table-basis").on(
    "change",
    'input[name="pricing-value"]',
    function() {
      var period = this.value;

      $(".odometer").each(function() {
        this.innerHTML = $(this).data(period + "-price");
      });
    }
  );
});

/*!
 Dashcore - HTML Startup Template, v1.0
 Forms JS file
 Copyright Â© 2021 5Studios.net
 http://5studios.net
 */

"use strict";
$(function($) {
  /** WIZARD
   * Each wizard has its own configuration, if you're going to use one or another please make sure the selector matches the one used bellow
   * You can remove the code you're not going to use to speed up the site.
   **/
  (function() {
    var defaultConfig = {
      //showStepURLhash: false, // not show the hash on URL
      theme: "dots",
      autoAdjustHeight: false,
      anchorSettings: {
        enableAllAnchors: true, // Activates all anchors clickable all times
        removeDoneStepOnNavigateBack: true // remove the "done" on visited steps when navigating back
      },
      enableURLhash: true // Enable selection of the step based on url hash
    };

    var doAjax = function($form, config) {
      var dfd = new $.Deferred();
      var settings = $.extend(true, {}, config, {
        url: $form.attr("action"),
        type: "POST",
        data: $form.serializeArray(),
        dataType: "json",
        beforeSend: function() {
          $formWizard.smartWizard("block");
        }
      });

      $.ajax(settings)
        .done(function(data) {
          if (data.result) {
            $form.trigger("form.submitted", [data]);

            $("input, textarea", $form).removeClass("error");
            $form.addClass("submitted");
          } else {
            if (data.errors) {
              $.each(data.errors, function(i, v) {
                var $input = $("[name$='[" + i + "]']", $form).addClass(
                  "error"
                );
                $input
                  .tooltip({ title: v, placement: "bottom", trigger: "manual" })
                  .tooltip("show")
                  .on("focus", function() {
                    $(this).tooltip("destroy");
                  });
              });
            }
          }

          $formWizard.smartWizard("unblock");
          dfd.resolve(data.result);
        })
        .fail(function() {
          $formWizard.smartWizard("unblock");

          //show failure message
          dfd.reject();
        });

      return dfd.promise();
    };

    // 1. BASIC WIZARD
    // This is a basic configuration, just setting the theme and default configuration
    $("#basic-wizard").smartWizard(defaultConfig);

    // 2. AJAX WIZARD
    // Ajax is not built-in, instead you can listen to stepContent event and provide the ajax contents.
    var $ajaxWizard = $("#ajax-wizard").smartWizard(defaultConfig);
    $ajaxWizard.on("stepContent", function(
      e,
      anchorObject,
      stepIndex,
      stepDirection
    ) {
      // Read data value from the anchor element
      var dataStep = anchorObject.data("step");
      var ajaxURL = "wizard/step-" + dataStep;

      // Return a promise object
      return new Promise(function(resolve, reject) {
        // Ajax call to fetch your content
        $.ajax({
          method: "GET",
          url: ajaxURL,
          beforeSend: function(xhr) {
            // Show the loader
            $ajaxWizard.smartWizard("loader", "show");
          }
        })
          .done(function(res) {
            // Resolve the Promise with the content
            resolve(res);

            // Hide the loader
            $ajaxWizard.smartWizard("loader", "hide");
          })
          .fail(function(err) {
            // Reject the Promise with error message to show as content
            reject("An error loading the resource");

            // Hide the loader
            $ajaxWizard.smartWizard("loader", "hide");
          });
      });
    });

    // 3. FORM WIZARD
    // Another way to load content through ajax is set the "contentUrl" via setting
    // this will send all requests to the same endpoint, you can take control of it via "step_number" variable sent automatically

    // Save the wizard variable, we'll used it below to work with it
    var $formWizard = $("#form-wizard");
    $formWizard
      .on("showStep", function(evt, anchorObject, stepNumber, stepDirection) {
        var dataStep = anchorObject.data("step");
        var validateOptions = {
          errorPlacement: function(error, element) {
            var $parent = element.parent();

            if ($parent.hasClass("input-group")) {
              error.insertAfter($parent);
            } else if ($parent.hasClass("has-icon")) {
              error.insertBefore($parent);
            } else if ($parent.hasClass("control")) {
              error.insertAfter(element.next(".control-label"));
            } else {
              error.insertAfter(element);
            }
          }
        };

        var $form = $("#form-step-" + dataStep);
        $form.validate(validateOptions, $formWizard);

        /** console.log("showStep", {
          formid: "#form-step-" + dataStep,
          form: $form
        }); */

        // some work with step-2 (pricing plans)
        if (stepNumber === 2) {
          $("input[type=radio]", $form).on("change", function(e) {
            $(e.target)
              .closest(".row")
              .find(".card")
              .removeClass("b b-3");

            $(e.target)
              .closest(".card")
              .addClass("b b-3");
          });
        }
      })
      .on("leaveStep", function(evt, anchorObject, stepNumber, stepDirection) {
        var dataStep = anchorObject.data("step");
        var $form = $("#form-step-" + dataStep, $formWizard);

        /** console.log("leaveStep", {
          formid: "#form-step-" + dataStep,
          form: $form,
          stepDirection
        }); **/

        // stepDirection === 'forward' :- this condition allows to do the form validation
        // only on forward navigation, that makes easy navigation on backwards still do the validation when going next
        if (stepDirection === 1 && $form.length) {
          if (!$form.valid()) {
            return false;
          }

          return doAjax($form);
        }

        return true;
      })
      .on("stepContent", function(e, anchorObject, stepIndex, stepDirection) {
        $formWizard.smartWizard("loader", "show");

        // Read data value from the anchor element
        var dataStep = anchorObject.data("step");
        var ajaxURL = "wizard/get-form?step_number=" + dataStep;

        return new Promise(function(resolve, reject) {
          // Ajax call to fetch your content
          $.ajax({
            method: "GET",
            url: ajaxURL,
            beforeSend: function(xhr) {
              $formWizard.smartWizard("loader", "show");
            }
          })
            .done(function(res) {
              // Resolve the Promise with the content
              resolve(res);

              // Hide the loader
              $formWizard.smartWizard("loader", "hide");
            })
            .fail(function(err) {
              // Reject the Promise with error message to show as content
              reject("Error loading the resource");

              // Hide the loader
              $formWizard.smartWizard("loader", "hide");
            });
        });
      })
      .smartWizard(
        $.extend(
          {},
          {
            selected: 0
            /*transition: {
                animation: 'slide-horizontal',
              }*/
          },
          defaultConfig
        )
      );
  })();
});

"use strict";

// utils for cookie-law plugin
window["cookieconsent_example_util"] = {
  // Fill a select element with options (html can be configured using `cb`)
  fillSelect: function(select, options, selected, cb) {
    if (!select) return;

    var html = "";
    if (typeof cb !== "function") {
      cb = this.getSimpleOption;
    }
    for (var prop in options) {
      html += cb(options[prop], prop, prop == selected);
    }
    select.innerHTML = html;
  },

  getSimpleOption: function(label, value, selected) {
    return (
      "<option " +
      (selected ? 'selected="selected"' : "") +
      ' value="' +
      value +
      '">' +
      label +
      "</option>"
    );
  },

  tabularObject: function(obj, formatVal, formatKey) {
    var html = "<ul>";
    var defaultFn = function() {
      return arguments[0];
    };

    if (typeof formatKey !== "function") formatKey = defaultFn;
    if (typeof formatVal !== "function") formatVal = defaultFn;

    for (var prop in obj) {
      html +=
        "<li><em>" +
        formatKey(prop, obj[prop]) +
        "</em> " +
        formatVal(obj[prop], prop) +
        "</li>";
    }
    return html + "</ul>";
  },

  initialisePopupSelector: function(options) {
    if (!options.selector) return;

    var examples = Object.keys(options.popups);
    var itemOpen = "<li><span>";
    var itemClose = "</span></li>";
    var instances = [];

    options.selector.innerHTML =
      itemOpen +
      Object.keys(options.popups).join(itemClose + itemOpen) +
      itemClose;

    options.selector.onclick = function(e) {
      var targ = e.target,
        item;

      // if the target is the container, exit
      if (targ.isEqualNode(options.selector)) return;

      // from this point, only the child elements of opts.selector will get through.
      // out of these child elements, we want to find the closest direct decendant <li>
      while (targ.tagName !== "LI" && targ.parentNode) {
        targ = targ.parentNode;
      }

      if (!targ.parentNode.isEqualNode(options.selector)) return;

      // from this point, 'targ' will be a direct decendant of opts.selector
      var idx = Array.prototype.indexOf.call(options.selector.children, targ);

      if (idx >= 0 && instances[idx]) {
        instances[idx].clearStatus();

        // We could remember the popup that's currently open, but it gets complicated when we consider
        // the revoke button. Therefore, simply close them all regardless
        instances.forEach(function(popup) {
          if (popup.isOpen()) {
            popup.close();
          }
          popup.toggleRevokeButton(false);
        });

        instances[idx].open();
      }
    };

    for (var i = 0, l = examples.length; i < l; ++i) {
      options.popups[examples[i]].onPopupOpen = (function(options) {
        return function() {
          var codediv = document.getElementById("options");
          if (codediv) {
            codediv.innerHTML = JSON.stringify(options, null, 2);
          }
        };
      })(options.popups[examples[i]]);

      var myOpts = options.popups[examples[i]];

      myOpts.autoOpen = false;

      options.cookieconsent.initialise(
        myOpts,
        function(idx, popup) {
          instances[idx] = popup;
        }.bind(null, i),
        function(idx, err, popup) {
          instances[idx] = popup;
          console.error(err);
        }.bind(null, i)
      );
    }

    return instances;
  }
};

"use strict";

(function(C, U) {
  var palettes = {
    honeybee: {
      popup: { background: "#000" },
      button: { background: "#f1d600", padding: "5px 25px" }
    },
    blurple: {
      popup: { background: "#3937a3" },
      button: { background: "#e62576" }
    },
    mono: {
      popup: { background: "#237afc" },
      button: {
        background: "transparent",
        border: "#fff",
        text: "#fff",
        padding: "5px 40px"
      }
    },
    nuclear: {
      popup: { background: "#aa0000", text: "#ffdddd" },
      button: { background: "#ff0000" }
    },
    cosmo: {
      popup: { background: "#383b75" },
      button: { background: "#f1d600", padding: "5px 50px" }
    },
    neon: {
      popup: { background: "#1d8a8a" },
      button: { background: "#62ffaa" }
    },
    corporate: {
      popup: { background: "#edeff5", text: "#838391" },
      button: { background: "#4b81e8" }
    }
  };

  var cookiePopups = U.initialisePopupSelector({
    cookieconsent: C,
    selector: document.querySelector(".example-selector-themes"),
    popups: {
      Mono: {
        type: "info",
        position: "bottom",
        palette: palettes.mono
      },
      Honeybee: {
        type: "info",
        position: "top",
        palette: palettes.honeybee
      },
      Blurple: {
        type: "opt-out",
        position: "bottom-left",
        palette: palettes.blurple,
        content: {
          message: "You can override the text that appears in an alert too.",
          dismiss: "Awesome"
        }
      },
      Nuclear: {
        type: "info",
        position: "bottom-right",
        theme: "edgeless",
        palette: palettes.nuclear,
        content: {
          dismiss: "I accept certain doom"
        }
      },
      Cosmo: {
        type: "opt-out",
        position: "bottom",
        palette: palettes.cosmo
      },
      Neon: {
        type: "info",
        theme: "classic",
        position: "bottom-left",
        palette: palettes.neon
      }
    }
  });
})(window.cookieconsent, window.cookieconsent_example_util);

"use strict";

(function(C, U) {
  var pageState = U.initialisePopupSelector({
    cookieconsent: C,
    selector: document.querySelector(".example-selector-custom-css"),
    popups: {
      "Click me": {
        theme: "custom"
      }
    }
  });
})(window.cookieconsent, window.cookieconsent_example_util);

"use strict";

(function(C, U) {
  var pageState = U.initialisePopupSelector({
    cookieconsent: C,
    selector: document.querySelector(".example-selector-informational"),
    popups: {
      "Try it": {
        type: "info",
        palette: {
          popup: { background: "#383b75" },
          button: { background: "#f1d600" }
        }
      }
    }
  });
})(window.cookieconsent, window.cookieconsent_example_util);

"use strict";

(function(C, U) {
  var pageState = U.initialisePopupSelector({
    cookieconsent: C,
    selector: document.querySelector(".example-selector-opt-out"),
    popups: {
      "Try it": {
        type: "opt-out",
        palette: {
          popup: { background: "#383b75" },
          button: { background: "#f1d600" }
        }
      }
    }
  });
})(window.cookieconsent, window.cookieconsent_example_util);

"use strict";

(function(C, U) {
  var pageState = U.initialisePopupSelector({
    cookieconsent: C,
    selector: document.querySelector(".example-selector-opt-in"),
    popups: {
      "Try it": {
        type: "opt-in",
        palette: {
          popup: { background: "#383b75" },
          button: { background: "#f1d600" }
        }
      }
    }
  });
})(window.cookieconsent, window.cookieconsent_example_util);

"use strict";

var COUNTRY_CODES = {
  // Representative group of countries with key differences
  US: "United States",
  UK: "United Kingdom",
  ES: "Spain",
  DE: "Germany",
  BE: "Belgium",
  "": "-----------------------------",

  // Every other country
  AF: "Afghanistan",
  AL: "Albania",
  DZ: "Algeria",
  AD: "Andorra",
  AO: "Angola",
  AG: "Antigua And Barbuda",
  AR: "Argentina",
  AM: "Armenia",
  AW: "Aruba",
  AU: "Australia",
  AT: "Austria",
  AZ: "Azerbaijan",
  BS: "Bahamas",
  BH: "Bahrain",
  BD: "Bangladesh",
  BB: "Barbados",
  BY: "Belarus",
  BZ: "Belize",
  BJ: "Benin",
  BT: "Bhutan",
  BO: "Bolivia",
  BA: "Bosnia And Herzegovina",
  BW: "Botswana",
  BR: "Brazil",
  BN: "Brunei",
  BG: "Bulgaria",
  BF: "Burkina Faso",
  BI: "Burundi",
  KH: "Cambodia",
  CM: "Cameroon",
  CA: "Canada",
  CV: "Cape Verde",
  CF: "Central African Republic",
  TD: "Chad",
  CL: "Chile",
  CN: "China",
  CX: "Christmas Island",
  CO: "Colombia",
  KM: "Comoros",
  CG: "Congo",
  CD: "Congo, Democratic Republic",
  CR: "Costa Rica",
  CI: "Cote D'Ivoire",
  HR: "Croatia",
  CU: "Cuba",
  CY: "Cyprus",
  CZ: "Czech Republic",
  DK: "Denmark",
  DJ: "Djibouti",
  DM: "Dominica",
  DO: "Dominican Republic",
  EC: "Ecuador",
  EG: "Egypt",
  SV: "El Salvador",
  EE: "Estonia",
  GQ: "Equatorial Guinea",
  ER: "Eritrea",
  ET: "Ethiopia",
  FJ: "Fiji",
  FI: "Finland",
  FR: "France",
  GA: "Gabon",
  GM: "Gambia",
  GE: "Georgia",
  GH: "Ghana",
  GR: "Greece",
  GL: "Greenland",
  GD: "Grenada",
  GT: "Guatemala",
  GN: "Guinea",
  GW: "Guinea-Bissau",
  GY: "Guyana",
  HT: "Haiti",
  VA: "Holy See (Vatican City State)",
  HN: "Honduras",
  HU: "Hungary",
  IS: "Iceland",
  IN: "India",
  ID: "Indonesia",
  IR: "Iran",
  IQ: "Iraq",
  IE: "Ireland",
  IL: "Israel",
  IT: "Italy",
  JM: "Jamaica",
  JP: "Japan",
  JO: "Jordan",
  KZ: "Kazakhstan",
  KE: "Kenya",
  KI: "Kiribati",
  KP: "Korea, North",
  KR: "Korea, South",
  KS: "Kosovo",
  KW: "Kuwait",
  KG: "Kyrgyzstan",
  LA: "Laos",
  LV: "Latvia",
  LB: "Lebanon",
  LS: "Lesotho",
  LR: "Liberia",
  LI: "Liechtenstein",
  LT: "Lithuania",
  LU: "Luxembourg",
  MK: "Macedonia",
  MG: "Madagascar",
  MW: "Malawi",
  MY: "Malaysia",
  MV: "Maldives",
  ML: "Mali",
  MT: "Malta",
  MH: "Marshall Islands",
  MR: "Mauritania",
  MU: "Mauritius",
  MX: "Mexico",
  FM: "Micronesia",
  MD: "Moldova",
  MC: "Monaco",
  MN: "Mongolia",
  ME: "Montenegro",
  MA: "Morocco",
  MZ: "Mozambique",
  MM: "Myanmar",
  NA: "Namibia",
  NR: "Nauru",
  NP: "Nepal",
  NL: "Netherlands",
  NI: "Nicaragua",
  NE: "Niger",
  NG: "Nigeria",
  NO: "Norway",
  OM: "Oman",
  PK: "Pakistan",
  PW: "Palau",
  PA: "Panama",
  PG: "Papua New Guinea",
  PY: "Paraguay",
  PE: "Peru",
  PH: "Philippines",
  PL: "Poland",
  PT: "Portugal",
  QA: "Qatar",
  RO: "Romania",
  RU: "Russia",
  RW: "Rwanda",
  KN: "Saint Kitts And Nevis",
  LC: "Saint Lucia",
  VC: "Saint Vincent And Grenadines",
  WS: "Samoa",
  SM: "San Marino",
  ST: "Sao Tome And Principe",
  SA: "Saudi Arabia",
  SN: "Senegal",
  RS: "Serbia",
  SC: "Seychelles",
  SL: "Sierra Leone",
  SG: "Singapore",
  SK: "Slovakia",
  SI: "Slovenia",
  SB: "Solomon Islands",
  SO: "Somalia",
  ZA: "South Africa",
  SS: "South Sudan",
  LK: "Sri Lanka",
  SD: "Sudan",
  SR: "Suriname",
  SZ: "Swaziland",
  SE: "Sweden",
  CH: "Switzerland",
  SY: "Syria",
  TW: "Taiwan",
  TJ: "Tajikistan",
  TZ: "Tanzania",
  TH: "Thailand",
  TL: "Timor-Leste",
  TG: "Togo",
  TK: "Tokelau",
  TO: "Tonga",
  TT: "Trinidad And Tobago",
  TN: "Tunisia",
  TR: "Turkey",
  TM: "Turkmenistan",
  TV: "Tuvalu",
  UG: "Uganda",
  UA: "Ukraine",
  AE: "United Arab Emirates",
  UY: "Uruguay",
  UZ: "Uzbekistan",
  VU: "Vanuatu",
  VE: "Venezuela",
  VN: "Vietnam",
  YE: "Yemen",
  ZM: "Zambia",
  ZW: "Zimbabwe"
};

(function(C, U) {
  var popupInst;
  var $loc = document.getElementById("cookie-law-location");

  if (!$loc) return;

  U.fillSelect($loc, COUNTRY_CODES, COUNTRY_CODES["AC"]);

  $loc.onchange = function() {
    var code =
      $loc.selectedIndex >= 0 ? $loc[$loc.selectedIndex].value : undefined;

    if (!code) return;

    draw(code);
  };

  draw($loc[0].value);

  // $loc.focus();

  function draw(code) {
    var options = getOptions(code);

    if (popupInst) {
      popupInst.clearStatus();
      popupInst.destroy();
      popupInst = null;
    }

    cookieconsent.initialise(
      options,
      function(popup) {
        popupInst = popup;
        popupInst.autoOpen();
      },
      function(err) {
        console.error(err);
      }
    );

    // show country options on screen (so user knows how this country affected the settings)
    document.getElementById("message").innerHTML = getCountryDetails(code);
  }

  function getOptions(code) {
    return {
      type: "info",
      regionalLaw: true,
      palette: {
        popup: { background: "#343c66", text: "#cfcfe8" },
        button: { background: "#f71559" }
      },
      law: {
        // takes the "preferred" options and changes them slightly to match the country's law
        countryCode: code
      }
    };
  }

  function getCountryDetails(code) {
    // We only get these to show (on screen) how the country behaves
    var law = new cookieconsent.Law({});
    var countryOpts = law.get(code);

    if (!countryOpts.hasLaw) {
      return "Has cookie law? no";
    }

    return U.tabularObject({
      "Has cookie law?": "yes",
      "Choice has to be revokable?": countryOpts.revokable ? "yes" : "no",
      "Can be automatically dismissed?": countryOpts.explicitAction
        ? "no"
        : "yes"
    });
  }
})(window.cookieconsent, window.cookieconsent_example_util);

/**
 * FOR DEMO PURPOSES ONLY
 **/

"use strict";

// document ready
$(function() {
  var $accordionColorSelector = $("#accordion-theme-current");
  var $accordion = $("#accordion-colored");

  $accordion.addClass("accordion-" + $accordion.data("current"));
  $accordionColorSelector.addClass("btn-outline-" + $accordion.data("current"));

  $("#demo-accordion-theme-selector").on("click", ".dropdown-item", function(
    e
  ) {
    e.preventDefault();

    var color = $(this).data("color");
    var current = $accordion.data("current");

    $accordion
      .removeClass("accordion-" + current)
      .addClass("accordion-" + color);

    $accordion.data("current", color);

    // Update the selector text
    $accordionColorSelector.html(color);
    $accordionColorSelector
      .removeClass("btn-outline-" + current)
      .addClass("btn-outline-" + color);
  });

  $(".navigation", ".demo-blocks").each(function(i, e) {
    var $element = $(e);

    $(".navbar-toggler", e).on("click", function() {
      $element.toggleClass("navbar-expanded");
    });
  });

  /**
   * ANIMATION BAR
   **/
  (function() {
    $(".horizontal-demo-bars").animateBar({
      orientation: "horizontal",
      step: 100,
      duration: 1000,
      elements: [
        { label: "Implementation", value: 19 }, // style: { progress: "progress-4" }
        { label: "Design", value: 75 },
        { label: "Branding", value: 34 },
        { label: "Beauty", value: 55 },
        { label: "Responsiveness", value: 89 }
      ]
    });

    $(".vertical-demo-bars").animateBar({
      orientation: "vertical",
      step: 100,
      duration: 1000,
      elements: [
        { value: 49 },
        { value: 75 },
        { value: 34 },
        { value: 55 },
        { value: 89 }
      ]
    });
  })();
});
